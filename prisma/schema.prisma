generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider              = "zod-prisma"
  output                = "./ZOD"
  modelCase             = "camelCase"
  relationModel         = true
  modelSuffix           = "Schema"
  prismaJsonNullability = false
}

datasource db {
  provider = "sqlite"
  url      = env("SEX")
  //extensions = [pgcrypto]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https:shorturl.at/chJK1")
  accounts      Account[]
  comments      Comment[]
  likes         Like[]
  sessions      Session[]
  hotlines      Hotline[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  slug     String    @id
  count    BigInt    @default(1)
  comments Comment[]

  @@index([slug])
}

model Comment {
  id        String    @id @default(nanoid())
  text      String /// @zod.max(10000)
  createdAt DateTime
  updatedAt DateTime?
  userId    String?
  parentId  String?
  slug      String?
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("ParentChild")
  post      Post?     @relation(fields: [slug], references: [slug], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([userId, slug, createdAt])
}

model Hotline {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime
  updatedAt DateTime?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model Like {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}
